name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y rrdtool librrd-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Check code formatting
      run: |
        pip install black
        black --check src/opnsense/scripts/hilink
    
    - name: Run linting
      run: |
        pip install pylint
        find src -name "*.py" -exec pylint {} \; || true
    
    - name: Type checking
      run: |
        pip install mypy
        mypy src/opnsense/scripts/hilink --ignore-missing-imports || true
    
    - name: Run tests
      run: |
        # Create necessary directories for tests with proper permissions
        mkdir -p /tmp/opnsense/etc /tmp/opnsense/data /tmp/opnsense/log /tmp/hilink
        export OPNSENSE_CONFIG_DIR=/tmp/opnsense/etc
        export OPNSENSE_DATA_DIR=/tmp/opnsense/data
        export HILINK_LOG_DIR=/tmp/opnsense/log
        export HILINK_CONFIG_DIR=/tmp/hilink
        
        # Run tests with continue-on-error for now
        python -m pytest tests/ -v --cov=src/opnsense/scripts/hilink --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/
    
    - name: Run Safety CLI to check for vulnerabilities
      uses: pyupio/safety-action@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}

  integration:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y rrdtool librrd-dev
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test service startup
      run: |
        # Set test environment variables
        export OPNSENSE_CONFIG_DIR=/tmp/opnsense/etc
        export OPNSENSE_DATA_DIR=/tmp/opnsense/data
        export HILINK_LOG_DIR=/tmp/opnsense/log
        export HILINK_CONFIG_DIR=/tmp/hilink
        mkdir -p /tmp/opnsense/etc /tmp/opnsense/data /tmp/opnsense/log /tmp/hilink
        
        timeout 10 python src/opnsense/scripts/hilink/hilink_service.py --foreground --debug || true
    
    - name: Test configuration manager
      run: |
        export OPNSENSE_CONFIG_DIR=/tmp/opnsense/etc
        export OPNSENSE_DATA_DIR=/tmp/opnsense/data
        export HILINK_LOG_DIR=/tmp/opnsense/log
        export HILINK_CONFIG_DIR=/tmp/hilink
        mkdir -p /tmp/opnsense/etc /tmp/opnsense/data /tmp/opnsense/log /tmp/hilink
        
        python -c "from src.opnsense.scripts.hilink.lib.config_manager import ConfigManager; cm = ConfigManager(); cm.load(); print('Config loaded successfully')"
    
    - name: Test HiLink API module
      run: |
        python -c "from src.opnsense.scripts.hilink.lib.hilink_api import HiLinkModem; print('HiLink API imported successfully')"